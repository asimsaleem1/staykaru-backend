import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';
import { Document, Schema as MongooseSchema } from 'mongoose';

export enum UserRole {
  STUDENT = 'student',
  LANDLORD = 'landlord',
  FOOD_PROVIDER = 'food_provider',
  ADMIN = 'admin',
}

export enum IdentificationType {
  CNIC = 'cnic',
  PASSPORT = 'passport',
}

@Schema({ timestamps: true })
export class User extends Document {
  @Prop({ required: true })
  name: string;

  @Prop({ required: true, unique: true })
  email: string;

  @Prop({ required: true })
  password: string; // Plain text password as per requirement

  @Prop({ required: true, enum: UserRole, default: UserRole.STUDENT })
  role: UserRole;

  @Prop({ required: true })
  phone: string;

  @Prop({ required: true })
  countryCode: string; // Country code for phone number

  @Prop()
  address: string;

  @Prop({ required: true })
  gender: string;

  @Prop()
  profileImage?: string; // URL to profile image

  @Prop({ enum: IdentificationType })
  identificationType?: IdentificationType; // CNIC or Passport

  @Prop()
  identificationNumber?: string; // CNIC or Passport number

  // Student-specific fields
  @Prop({ default: false })
  registrationComplete: boolean; // Registration completion status

  @Prop()
  university?: string; // University name

  @Prop()
  studentId?: string; // Student ID

  @Prop()
  program?: string; // Study program or major

  @Prop()
  yearOfStudy?: string; // Year of study

  @Prop()
  dateOfBirth?: string; // Date of birth

  @Prop()
  emergencyContactName?: string; // Emergency contact name

  @Prop()
  emergencyContactPhone?: string; // Emergency contact phone

  @Prop()
  emergencyContactRelationship?: string; // Emergency contact relationship

  // Landlord-specific fields
  @Prop()
  businessLicense?: string; // Business license number

  @Prop()
  yearsOfExperience?: number; // Years of experience

  @Prop({ type: [String] })
  propertyTypes?: string[]; // Property types managed

  // Food Provider-specific fields
  @Prop()
  businessName?: string; // Restaurant/Business name

  @Prop()
  foodLicense?: string; // Food license number

  @Prop()
  businessRegistration?: string; // Business registration number

  @Prop({ type: [String] })
  cuisineTypes?: string[]; // Types of cuisine offered

  @Prop()
  averageDeliveryTime?: number; // Average delivery time in minutes

  @Prop()
  minimumOrder?: number; // Minimum order amount

  @Prop()
  operatingHours?: string; // Operating hours

  @Prop({ default: false })
  isEmailVerified: boolean; // Email verification status

  @Prop({ default: true })
  isActive: boolean;

  // Authentication tracking
  @Prop({ default: 0 })
  failedLoginAttempts: number;

  @Prop()
  lastLoginAt?: Date;

  // Account deactivation tracking
  @Prop()
  deactivatedAt?: Date;

  @Prop({ type: MongooseSchema.Types.ObjectId, ref: 'User' })
  deactivatedBy?: string;

  @Prop()
  deactivationReason?: string;

  // FCM tokens for push notifications
  @Prop({ type: [String], default: [] })
  fcmTokens: string[];

  // Notifications
  @Prop({ type: Array, default: [] })
  notifications: any[];

  // Timestamps (auto-generated by mongoose)
  createdAt?: Date;
  updatedAt?: Date;
}

export const UserSchema = SchemaFactory.createForClass(User);
